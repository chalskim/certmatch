// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 기본 정보
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expert  Expert?
  company Company?

  @@map("users")
}

// 전문가 정보
model Expert {
  id          String  @id @default(cuid())
  userId      String  @unique
  title       String? // 직책/직위
  experience  Int?    // 경력 년수
  description String? // 자기소개
  skills      String[] // 전문 기술/분야
  
  // 인증 관련
  certifications String[] // 보유 인증
  education      String?  // 학력
  portfolio      String?  // 포트폴리오 URL
  
  // 활동 정보
  isAvailable Boolean @default(true)
  rating      Float?  @default(0)
  reviewCount Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  schedules    Schedule[]
  reviews      Review[]

  @@map("experts")
}

// 기업 정보
model Company {
  id          String  @id @default(cuid())
  userId      String  @unique
  companyName String
  industry    String? // 업종
  size        String? // 기업 규모
  description String? // 기업 소개
  website     String? // 웹사이트
  address     String? // 주소
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[]
  schedules    Schedule[]

  @@map("companies")
}

// 인증/심사 지원
model Application {
  id               String            @id @default(cuid())
  expertId         String
  companyId        String
  certificationType String           // 인증 유형
  description      String?          // 지원 내용
  status           ApplicationStatus @default(PENDING)
  appliedAt        DateTime         @default(now())
  reviewedAt       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expert    Expert     @relation(fields: [expertId], references: [id], onDelete: Cascade)
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  schedules Schedule[]

  @@map("applications")
}

// 일정 관리
model Schedule {
  id            String        @id @default(cuid())
  applicationId String?
  expertId      String
  companyId     String
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  location      String?       // 장소
  type          ScheduleType  @default(CONSULTATION)
  status        ScheduleStatus @default(SCHEDULED)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  application Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)
  expert      Expert       @relation(fields: [expertId], references: [id], onDelete: Cascade)
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

// 리뷰/평가
model Review {
  id        String @id @default(cuid())
  expertId  String
  companyId String
  rating    Int    // 1-5 점수
  comment   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expert Expert @relation(fields: [expertId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Enums
enum UserRole {
  USER
  EXPERT
  COMPANY
  ADMIN
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
}

enum ScheduleType {
  CONSULTATION
  AUDIT
  TRAINING
  MEETING
}

enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}